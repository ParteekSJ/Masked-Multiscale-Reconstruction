import syssys.path.append("../")import osfrom glob import globfrom dataset.mvtec import MVTecDatasetfrom config.aebad_V_config import get_cfgfrom torch.utils.data import DataLoaderclass AeBAD_VDataset(MVTecDataset):    def get_image_data(self):        imgpaths_per_class = {}        for classname in self.classnames_to_use:            classpath = os.path.join(self.source, classname, self.split)            imgpaths_per_class[classname] = {}            if self.split == "train":                anomaly_types = ["good"]                for anomaly in anomaly_types:                    anomaly_path = os.path.join(classpath, anomaly)                    if os.path.isdir(anomaly_path):                        crucial_word = "*/*.jpg"                        anomaly_files = glob(os.path.join(anomaly_path, crucial_word))                        imgpaths_per_class[classname][anomaly] = anomaly_files            else:                video_types = [self.cfg.DATASET.domain_shift_category]                for video_name in video_types:                    video_path = os.path.join(classpath, video_name)                    if os.path.isdir(video_path):                        # Adding an option to select 'anomaly', 'good' or 'both' categories.                        if self.cfg.DATASET.anomaly_type == "all":                            anomaly_types = [                                i                                for i in os.listdir(video_path)                                if os.path.isdir(os.path.join(video_path, i))                            ]                        else:                            anomaly_types = [self.cfg.DATASET.anomaly_type]                        for anomaly in anomaly_types:                            anomaly_path = os.path.join(video_path, anomaly)                            if os.path.isdir(anomaly_path):                                crucial_word = "*.jpg"                                anomaly_files = glob(os.path.join(anomaly_path, crucial_word))                                imgpaths_per_class[classname][anomaly] = anomaly_files        # Unrolls the data dictionary to an easy-to-iterate list.        data_to_iterate = []        for classname in sorted(imgpaths_per_class.keys()):            for anomaly in sorted(imgpaths_per_class[classname].keys()):                for i, image_path in enumerate(imgpaths_per_class[classname][anomaly]):                    data_tuple = [classname, anomaly, image_path]                    data_tuple.append(None)                    data_to_iterate.append(data_tuple)        return imgpaths_per_class, data_to_iteratedef get_aebadV_data(cfg):    train_dataset = AeBAD_VDataset(        source=cfg.DATASET.aebad_v_dir,        classname="AeBAD_V",        cfg=cfg,        split="train",    )    test_dataset = AeBAD_VDataset(        source=cfg.DATASET.aebad_v_dir,        classname="AeBAD_V",        cfg=cfg,        split="test",    )    train_loader = DataLoader(        dataset=train_dataset,        batch_size=cfg.TRAIN_SETUPS.train_batch_size,        shuffle=True,        # num_workers=cfg.TRAIN_SETUPS.num_workers,    )    test_loader = DataLoader(        dataset=test_dataset,        batch_size=cfg.TRAIN_SETUPS.test_batch_size,        shuffle=False,        # num_workers=cfg.TRAIN_SETUPS.num_workers,    )    return train_loader, test_loaderif __name__ == "__main__":    cfg = get_cfg()    test_dataset = AeBAD_VDataset(        source="/Users/parteeksj/Desktop/DATASETS/AeBAD",        classname="AeBAD_V",        cfg=cfg,        split="test",    )    print(test_dataset.__len__())    _x = test_dataset.__getitem__(0)